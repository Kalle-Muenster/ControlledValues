/*///////////////////////////////////////////////////////////*\
||                                                           ||
||     File:      Delegat24.hpp                              ||
||     Author:    Autogenerated                              ||
||     Generated: 12.01.2022                                 ||
||                                                           ||
\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/
#ifndef _Delegat24_hpp_
#define _Delegat24_hpp_

#include <ControllerAccess.h>
namespace stepflow {
    class DelegateInt24Wrap
        : public stepflow::MovingValue<::Int24>
    {
        friend Stepflow::Int24Controller;
        typedef ::Int24         NT;
        typedef Stepflow::Int24 MT;

    protected:
        typedef MovingValue<NT> BASE;
        typedef NT(DelegateInt24Wrap::* BaseModeFunction)(Stepflow::ControlMode);
        typedef MT(*DelegateFunction)(MT%, MT%, MT%, MT%);

        DelegateFunction FUNCPTR;
        BaseModeFunction BASEPTR;

        virtual uint modeCodeBase(void) const {
            return *(uint*)"FUNC";
        }
        virtual unsigned usrModeSize() const {
            return sizeof(DelegateInt24Wrap);
        }
        NT baseCallFunc(Stepflow::ControlMode mod) {
            return checkMODE(stepflow::CtrlMode(mod));
        }

    public:
        virtual void* Pin(void* pin, int idx) {
            return idx > 1 ? BASE::Pin(pin, idx - 2) :
                idx ? (void*)&BASEPTR : (void*)&FUNCPTR;
        }
        virtual void Init(void) {
            PIN_COUNT += 2;
            BASEPTR = GetBaseCallFunction();
            controller->SetMOV(1);
            controller->SetMIN(INT24_MIN);
            controller->SetMAX(INT24_MAX);
        }
        virtual NT checkVALUE(NT* value) {
            return (NT)FUNCPTR(*(MT*)value,
                *(MT*)controller->getMINpt(),
                *(MT*)controller->getMAXpt(),
                *(MT*)controller->getMOVpt()
            );
        }
        void SetDelegateFunction(DelegateFunction func) {
            FUNCPTR = func;
        }
        BaseModeFunction GetBaseCallFunction(void) {
            return &DelegateInt24Wrap::baseCallFunc;
        }
    };

    class DelegateUInt24Wrap
        : public stepflow::MovingValue<::UInt24>
    {
        friend Stepflow::UInt24Controller;
        typedef ::UInt24         NT;
        typedef Stepflow::UInt24 MT;

    protected:
        typedef MovingValue<NT> BASE;
        typedef NT(DelegateUInt24Wrap::* BaseModeFunction)(Stepflow::ControlMode);
        typedef MT(*DelegateFunction)(MT%, MT%, MT%, MT%);

        DelegateFunction FUNCPTR;
        BaseModeFunction BASEPTR;

        virtual uint modeCodeBase(void) const {
            return *(uint*)"FUNC";
        }
        virtual unsigned usrModeSize() const {
            return sizeof(DelegateUInt24Wrap);
        }
        NT baseCallFunc(Stepflow::ControlMode mod) {
            return checkMODE(stepflow::CtrlMode(mod));
        }

    public:
        virtual void* Pin(void* pin, int idx) {
            return idx > 1 ? BASE::Pin(pin, idx - 2) :
                idx ? (void*)&BASEPTR : (void*)&FUNCPTR;
        }
        virtual void Init(void) {
            PIN_COUNT += 2;
            BASEPTR = GetBaseCallFunction();
            controller->SetMOV(1);
            controller->SetMIN(UINT24_MIN);
            controller->SetMAX(UINT24_MAX);
        }
        virtual NT checkVALUE(NT* value) {
            return (NT)FUNCPTR(*(MT*)value,
                *(MT*)BASE::controller->getMINpt(),
                *(MT*)BASE::controller->getMAXpt(),
                *(MT*)BASE::controller->getMOVpt()
            );
        }
        void SetDelegateFunction(DelegateFunction func) {
            FUNCPTR = func;
        }
        BaseModeFunction GetBaseCallFunction(void) {
            return &DelegateUInt24Wrap::baseCallFunc;
        }
    };
}
#include <ControllerAccess.h>
#endif